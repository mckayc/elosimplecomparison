General Overview:

Create a web app that uses the ELO ranking system to compare different items to determine which item is best or has the highest score. The app will be called "ELO Simple Comparison" Front end will be html and backend will be python.

Page breakdowns:

index.html - This page on top will say the app title and have a brief description of what the app does. Under that will be a text box where the user can list items to be compared. Under that should be two radio options: "Single voter" and "Multiple voters", if the user selects "Single voter" then nothing changes; if the user selects "Multiple voters" then a new text box appears with a prompt to enter all voters names. Under that are two buttons; one that says "Simple voting" and "Exact voting". Under the buttons are paragraphs explaining how each voting works: Simple voting - "Simple voting compare each item with only two other items. This is a faster way to vote but can have less accurate results. This should be used when voting on many items." Exact voting - "Exact voting compares each item with each other item. This leads to very accurate results but can take a very long time if you have many items. It is recommended to use this method if you are voting on 2 - 4 items."

simple.html - On top will be a title that says "Vote for the item you like most." Under that will list two random items.  Underneath each item will be a button that says "Vote". One the user presses "Vote", two more random items will appear. This will repeat until each item has been compared with two other items. If the user selected multiple voters on the index.html page, then the top of this page will list the voter's name. Instead of showing the two options, there will be a single button that says "Start voting". When that is pressed, then the two items show up. The entire voting process is repeated for each voter.

exact.html - This is the same as simple.html except that instead of comparing each item with two other random items, this mode will compare each item with another item randomly until it has been compared with each other item.

results.html - The top of this page will say "Scores" and will list each item with the score for each item. The scores will be listed from highest to lowest. The top score will have the largest font, then the second score will have the second largest font, then the thirt score will have the third largest font. All other scores will have the same size font that is slightly smaller that the third score font. If there were multiple voters then the scores should be listed in multiple sections. The top section should be an average of all voter's scores, and each section underneath that should be the voter's individual scores. Underneath the scores are two buttons: "Vote again" and "Start over". If the user presses "Vote again", the scores are all reset and the user is taken back to either simple.html or exact.html to vote again. If the user presses "Start over" then they are taken to index.html and all database info and user input is cleared. 

style.css - This is a css file to make all the pages look nice. The text should have modern fonts. There should be two modes: "Dark" and "Light". There should be a radio button on each page so the user can select dark or light mode. The choice should persist on all pages unless the user changes it. The overall look should look something similar to Google news or something like that. The text should be in the center of the screen and not to the right or left.

readme.md - This should be a file will instructions for this app that can be uploaded to Github. This file should explain what the app does and it should have instructions for installing and running this app locally. It should also have instructions for uploading to Github and include a Docker yml file that can be pasted to Portainer so that a user could easily install this on Docker and host it themselves.

Please create all these pages for me.
